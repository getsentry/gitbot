#!/usr/bin/env python

# This file is a copy of getsentry's repo for pytest testing
import argparse
import http.client
import re
import sys
from subprocess import check_call


def main(sha, commit=True, author=None):
    conn = http.client.HTTPSConnection("raw.githubusercontent.com")
    conn.request("GET", f"/getsentry/sentry/{sha}/requirements-base.txt")
    resp = conn.getresponse()

    if resp.status != 200:
        sys.exit(
            f"Failed to fetch sentry's requirements-base.txt for {sha} - is this a valid SHA?"
        )

    content = resp.read()
    conn.close()

    with open("requirements-sentry-base.txt", mode="wb") as f:
        f.write(
            b"# THIS FILE IS AUTOGENERATED BY bin/bump-sentry; do not change this manually.\n"
        )
        f.write(content)

    with open("requirements-sentry.txt", mode="w") as outfile:
        outfile.write(
            """# Do not change this manually. If you are testing a non-master branch, use bin/bump-sentry.
-e git+https://github.com/getsentry/sentry.git@{sha}#egg=sentry""".format(
                sha=sha
            )
        )
        outfile.write("\n")

    for file in ("cloudbuild.yaml", "docker/frontend_cloudbuild.yaml"):
        with open(file, mode="r+") as f:
            text = f.read()
            f.seek(0)
            f.truncate()
            f.write(
                re.sub(
                    r"'SENTRY_VERSION_SHA=.+',$",
                    f"'SENTRY_VERSION_SHA={sha}',",
                    text,
                    flags=re.M,
                )
            )

    git_command = (
        "git add requirements-sentry-base.txt requirements-sentry.txt cloudbuild.yaml docker/frontend_cloudbuild.yaml && "
        f'git commit -n -m "getsentry/sentry@{sha}" -m "#skipsentry"'
    )

    if author is not None:
        # fmt: off
        author = author.replace('"', '\"')
        # fmt: on
        git_command += f' --author="{author}"'

    if commit:
        check_call(git_command, shell=True)
    else:
        print(f">>> Not executing the command: \n{git_command}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("sha", metavar="SHA")
    parser.add_argument(
        "--no-commit", "-n", dest="commit", default=True, action="store_false"
    )
    parser.add_argument("--author", "-a", dest="author", default=None)

    args = parser.parse_args()

    main(args.sha, args.commit, args.author)
